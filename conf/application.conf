## Secret key
# Since the Tijdloze API does not make use of cookies that are signed by Play, we don't actually make use of the secret
# key. Hence we are happy setting a default value here, even though the official documentation advises against it.
#
# http://www.playframework.com/documentation/latest/ApplicationSecret
# https://github.com/playframework/playframework/issues/8075
play.http.secret.key = "somesecretkey"

## WS (HTTP Client)
# https://www.playframework.com/documentation/latest/ScalaWS#Configuring-WS
# ~~~~~
# The HTTP client primarily used for REST APIs.  The default client can be
# configured directly, but you can also create different client instances
# with customized settings. You must enable this by adding to build.sbt:
#
# libraryDependencies += ws // or javaWs if using java
#
play.ws {
  # Sets HTTP requests not to follow 302 requests
  #followRedirects = false

  # Sets the maximum number of open HTTP connections for the client.
  #ahc.maxConnectionsTotal = 50

  ## WS SSL
  # https://www.playframework.com/documentation/latest/WsSSL
  # ~~~~~
  ssl {
    # Configuring HTTPS with Play WS does not require programming.  You can
    # set up both trustManager and keyManager for mutual authentication, and
    # turn on JSSE debugging in development with a reload.
    #debug.handshake = true
    #trustManager = {
    #  stores = [
    #    { type = "JKS", path = "exampletrust.jks" }
    #  ]
    #}
  }
}

## Filters
# https://www.playframework.com/documentation/latest/Filters
# ~~~~~
# There are a number of built-in filters that can be enabled and configured
# to give Play greater security.  You must enable this by adding to build.sbt:
#
# libraryDependencies += filters
#
play.filters {
  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  # CORS is a protocol that allows web applications to make requests from the browser
  # across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {
    # Filter paths by a whitelist of path prefixes
    #pathPrefixes = ["/some/path", ...]

    # The allowed origins. If null, all origins are allowed.
    #allowedOrigins = ["http://www.example.com"]

    # The allowed HTTP methods. If null, all methods are allowed
    #allowedHttpMethods = ["GET", "POST"]
  }

  ## CSRF Filter
  # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
  # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
  # ~~~~~
  # Play supports multiple methods for verifying that a request is not a CSRF request.
  # The primary mechanism is a CSRF token. This token gets placed either in the query string
  # or body of every form submitted, and also gets placed in the users session.
  # Play then verifies that both tokens are present and match.
  csrf {
    # Sets the cookie to be sent only over HTTPS
    #cookie.secure = true

    # Defaults to CSRFErrorHandler in the root package.
    #errorHandler = MyCSRFErrorHandler
  }

  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    # The X-Frame-Options header. If null, the header is not set.
    #frameOptions = "DENY"

    # The X-XSS-Protection header. If null, the header is not set.
    #xssProtection = "1; mode=block"

    # The X-Content-Type-Options header. If null, the header is not set.
    #contentTypeOptions = "nosniff"

    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
    #permittedCrossDomainPolicies = "master-only"

    # The Content-Security-Policy header. If null, the header is not set.
    #contentSecurityPolicy = "default-src 'self'"
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  # Play provides a filter that lets you configure which hosts can access your application.
  # This is useful to prevent cache poisoning attacks.
  hosts {
    allowed = ["localhost"]
  }
}

slick.dbs.default {
  profile = "slick.jdbc.PostgresProfile$"
  dataSourceClass = "slick.jdbc.DatabaseUrlDataSource"
  db.driver = "org.postgresql.Driver"
  db.host = "localhost"
  db.host = ${?DB_HOST}
  db.database = "tijdloze_new"
  db.database = ${?DB_DATABASE}
  db.url = "jdbc:postgresql://"${slick.dbs.default.db.host}"/"${slick.dbs.default.db.database}"?currentSchema=tijdloze"
  db.user = "postgres"
  db.user = ${?DB_USER}
  db.password = "secret"
  db.password = ${?DB_PASSWORD}
}

play.filters.cors {
  allowedOrigins = ["http://localhost:3000", "http://tijdloze"]
}

play.filters.enabled += "play.filters.cors.CORSFilter"
play.filters.disabled += "play.filters.csrf.CSRFFilter"

play.filters.enabled += "filters.LoggingFilter"

tijdloze.auth0.publickey.path = "docker/stijnvermeeren-tijdloze-dev.pem"

tijdloze.spotify.clientId = ""
tijdloze.spotify.clientSecret = ""

tijdloze.contact.recipients = ""

tijdloze.covers.path = ""

athena {
  default {
    driver="com.simba.athena.jdbc.Driver"
    url="jdbc:awsathena://AwsRegion=eu-central-1"
    readOnly="false"
    S3OutputLocation="s3://tijdloze-musicbrainz/athena-output/"
    AwsCredentialsProviderClass="com.simba.athena.amazonaws.auth.profile.ProfileCredentialsProvider"
  }
}
